

sudo apt update
sudo apt install git

ssh-keygen
copy public key and paste it in github--settings--ssh keys
git init


#use only ssh authentication not for password authenticaion for more security--------it accets only ssh not https
check it is in HTTPS OR SSH-----------git -version------displays--http/ssh 
convert to ssh by below command


git remote set-url origin git@github.com:subhadra3n/install-tools.git

then opereate all the commands---
git add .
or
git add filename
git commit -m "update message"
git push origin main/master-branch--------------
git pull origin branch-name-------------if you are pulling specific branch
git pull -----------------if you are pulling all branhces

git branch -r--------To see all remote branches after cloning:


git rm filename

_______________________________________________________
git branch---------it lists all branches
git branch name--------create new branch
git checkout -b new-branch-creates-----------------it will creates new branch and land into that new branch
git checkout branch-name----------to switch to particular branch

git branch -d branch-name------to delete branch in local
git push origin --delete feature----------delete a branch on github
____________________________________________________________________________________________________
if we create new branch----------all the existing files willbe presented inthat new-branch
once we start creating any new-file, then only that file will store in new-branch 
& get pull request to merge the changes to master branch
------------- Types of branches        ---------------------
1.trunk based
2.feature branch
3. release branch 
4.git flow
5.env branch------complecated brach---main,dev,staging,testing branch---------again merge into main branch



____________________________________________________________________________________________________

f1 f2 f3
git add f1-------------now it comes to staging
git restore --staged f1               ------------now i want unstage this f1
git restore --staged .----------now all files which staged are come back to unstaged--which are last staged
______________________________________________________________________________________________-
f1 f2 f3 ----------after git add
                         git commit
---------------undo the changes from recent commit----------------------------
back to staged---or 1step back---git reset --soft HEAD~1
bac to untack---2steps back from commit--------git reset --mixed HEAD~1
____________________________________________________________________________________________________


PR---pull request---------after commiting -it is a review feature------it check whether we hvae to merge or not

_____________________________________________________________________________________________
git rebase
case-1--
we git clone-----------& make files, changes etc
if parleley any one can may changes in git hub directly------
local commit unable to push to ---github --------so we use



git pull --rebase---command with this our local repo got updated ---now we can push to remote

case-2---
master-------1st made changes & create feature branch
feature--------made changes by master is reflect here for begining only
master-----again made changes in master but it won't effect to feature branch
feature branch--------want update ---files from master---------command -----git rebase master
***so finally git --feature branch also get same file updation as master branch
________________________________________________________________________________
merge
fast forward merge--------only make changes in sub branch ---not in master branch

merge conflict occurs--------when same file i.e f1--------make changes in both master branch & sub branch (feature branch etc)
git merge --abort

for exmp
Youâ€™ll get a conflict like this:
1.Open file.txt, you'll see:
<<<<<<< HEAD
Hello from main branch
=======
Hello from feature branch
>>>>>>> feature
2.Manually resolve it by editing:
3.if not Optional: Abort the merge (if needed)
git merge --abort

Summary of conflict resolution steps:
Step	Command	Purpose
1	git merge feature	Causes the conflict
2	Edit file manually	Resolve conflict lines
3	git add file.txt	Mark resolved
4	git commit	Finish the merge
______________________________________________________________________________________________________________________________
what is shared repo---------nothing but github
what is your local repo-----our laptops----------where we commiting the code
branches-                  long lived branches-----only for small changes--------2 branches master & develop------make changes & merge to main branch
            --, short lived branches-------  --3 branches---main,dev & feature
feature branch-----------pull from dev branch not from main
make changes and merge to dev branch later merge to main branch

hotfix branch-----------immediate changes b/c something goes wrong/broken-----fix it and commit that code to main branch



